version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-ecs: circleci/aws-ecs@1.2.0

jobs:
  dependencies:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          keys: 
            - v1-repo-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies with NPM
          command: npm install
      - save_cache:
          key: v1-repo-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - persist_to_workspace:
          root: .
          paths:
            - "node_modules"

  lint:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run lint
          command: npm run lint

  unit_test:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: npm test
      - store_artifacts: 
          path: test-results
      - store_test_results:
          path: test-results

  deploy-to-staging:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - aws-cli/install
      - aws-cli/configure:
      - aws-ecs/deploy-service-update:
          family: 'noboru-demo-react'
          cluster-name: 'noboru-demo-php'
          service-name: 'noboru-demo-react-service'
          container-image-name-updates: 'container=web,tag=latest'
          force-new-deployment: true
          
  deploy-to-prodction:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - aws-cli/install
      - aws-cli/configure:
      - aws-ecs/deploy-service-update:
          family: 'noboru-demo-react'
          cluster-name: 'noboru-demo-php'
          service-name: 'noboru-demo-react-service'
          container-image-name-updates: 'container=web,tag=latest'
          force-new-deployment: true

workflows:
  version: 2
  service_update:
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies
      - unit_test:
          requires:
            - dependencies
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          repo: circleci-demo-javascript-react-app
          executor:
            name: aws-ecr/default
            use-docker-layer-caching: true
          filters:
            branches:
              only: dockerize-multistage*
          requires:
              - lint
              - unit_test
      - deploy-to-staging:
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only: dockerize-multistage-staging
      - deploy-to-prodction:
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only: dockerize-multistage

            
