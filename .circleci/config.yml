version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-ecs: circleci/aws-ecs@1.2.0

jobs:
  dependencies:
    docker:
      - image: circleci/node:12
    steps:
      - checkout # special step to check out source code to working directory
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys: 
            - v1-repo-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies with NPM
          command: npm install # replace with `yarn install` if using yarn
      - save_cache: # special step to save the dependency cache
          key: v1-repo-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - persist_to_workspace:
          root: .
          paths:
            - "node_modules"

  lint:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run lint
          command: npm run lint

  unit_test:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          # Runs jest with "--maxWorkers=2" argument to avoid OOM issues
          command: npm test # replace with `yarn test` if using yarn
      - store_artifacts: 
          path: test-results
      - store_test_results:
          path: test-results

  deploy:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Deploy to Heroku
          command: git push -f https://heroku:${HEROKU_API_KEY}@git.heroku.com/${HEROKU_GIT}.git master:master

workflows:
  version: 2
  service_update:
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies
      - unit_test:
          requires:
            - dependencies
#      - deploy:
#          filters:
#            branches:
#              only: master
#          requires:
#            - lint
#            - unit_test
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          repo: circleci-demo-javascript-react-app
          executor:
            name: aws-ecr/default
            use-docker-layer-caching: true
          filters:
            branches:
              only: dockerize
          requires:
              - lint
              - unit_test
      - aws-ecs/deploy-service-update:
          family: 'noboru-demo-react-service'
          cluster-name: 'noboru-demo-php'
          container-image-name-updates: 'container=circleci-demo-javascript-react-app,tag=latest'
          requires:
            - aws-ecr/build-and-push-image
